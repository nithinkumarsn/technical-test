{"version":3,"sources":["components/TicketList.js","components/BoxModel.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TicketList","props","className","BoxModel","randomgen","console","log","rand","Math","floor","random","setState","count","state","result","NumbInput","bind","e","value","reqnum","this","rew","toString","length","req","handlebutton","id","onClick","target","style","fontSize","paddingTop","src","logo","alt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"2SAyBgBA,EAtBG,SAACC,GAGZ,OAEI,yBAAKC,UAAU,WACf,6CAEG,wCC0EAC,E,kDA9EX,WAAYF,GAAO,IAAD,8BACd,cAAMA,IA+BNG,UAAW,WACPC,QAAQC,IAAI,SACZ,IAAMC,EAAKC,KAAKC,MAAM,IAAyB,OAAhBD,KAAKE,UACpC,EAAKC,SAAS,CACVC,MAAM,EAAKC,MAAMD,MAAM,EACvBE,OAAOP,IAGXF,QAAQC,IAAI,EAAKO,MAAMD,QAtC3B,EAAKC,MAAM,CACPD,MAAM,EACNG,UAAU,GACVD,OAAO,IAEX,EAAKV,UAAU,EAAKA,UAAUY,KAAf,gBAPD,E,yDASLC,GACT,IAAMC,EAAMD,EACZZ,QAAQC,IAAIY,GACb,IAAMC,EAAO,GACZ,OAAOD,GACH,IAAK,MACDE,KAAKT,SAAS,CAACG,OAAO,KAE1B,IAAK,YACF,IAAMO,EAAKF,EAAOG,SAASC,OAAO,EAC5B,sBAANJ,EAAOE,EACP,MAEH,IAAK,QACDD,KAAKT,SAAS,CAACG,OAAO,KACtB,MAEJ,QAEG,IAAMU,EAAKL,EAAQD,EAAMI,WACxBjB,QAAQC,IAAIkB,M,+BAcnB,IAAMC,EAAaL,KAAKK,aAEzB,OACI,yBAAKvB,UAAU,YAEf,yBAAKA,UAAU,aACf,wBAAIA,UAAU,OAAd,uBACA,wBAAIwB,GAAG,SAAP,UACA,4BAAQR,MAAM,IAAIS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAtD,KACA,4BAAQA,MAAM,IAAIS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAtD,KACA,4BAAQA,MAAM,IAAIS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAtD,KACA,4BAAQA,MAAM,IAAIS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAtD,KACA,4BAAQA,MAAM,IAAIS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAtD,KACA,4BAAQA,MAAM,IAAIS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAtD,KACA,4BAAQA,MAAM,IAAIS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAtD,KACA,4BAAQA,MAAM,IAAIS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAtD,KACA,4BAAQA,MAAM,IAAIS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAtD,KACA,4BAAQA,MAAM,YAAYS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAS,kBAAC,IAAD,CAAaW,MAAO,CAACC,SAAS,WACrG,4BAAQZ,MAAM,IAAIS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAtD,KACA,4BAAQA,MAAM,QAAQS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,SAAQ,kBAAC,IAAD,CAAiBW,MAAO,CAACC,SAAS,WACpG,4BAASZ,MAAM,MAAMS,QAAS,SAAAV,GAAC,OAAIQ,EAAaR,EAAEW,OAAOV,QAAQQ,GAAG,UAAS,kBAAC,IAAD,CAAUG,MAAO,CAACC,SAAS,OAAOC,WAAW,SAA1H,eAEC,kBAAC,EAAD,CAAYb,MAAOE,KAAKP,MAAMC,SAC9B,yBAAKZ,UAAU,mBACf,4BAAQyB,QAASP,KAAKhB,WAAtB,IAAkC,yBAAK4B,IAAKC,IAAM/B,UAAU,WAAWgC,IAAI,SAC3E,uBAAGhC,UAAU,OAAb,kD,GArEWiC,aCQTC,MATf,WACE,OACE,yBAAKlC,UAAU,OACb,wBAAIA,UAAU,cAAd,0BACA,kBAAC,EAAD,QCGcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a,sCEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.37b96fc7.chunk.js","sourcesContent":["import React ,{useState}from 'react'\r\nimport '../App.css'\r\n\r\nconst TicketList = (props) => {\r\n    // const item=this.props;\r\n    // if(item){\r\n        return(\r\n       \r\n            <div className='tickets'>\r\n            <h1>Saved Tickets</h1>\r\n               {/* <li>{this.props}</li> */}\r\n               <li>123456</li>\r\n            </div>       \r\n            \r\n            )\r\n    // }\r\n    // return (\r\n    //     <div className='tickets'>\r\n    //         <h1>Saved Tickets</h1>\r\n    //         </div>\r\n    // )\r\n    \r\n   \r\n }\r\n\r\n export default TicketList;","import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport {MdDeleteForever,MdBackspace,MdAddBox} from 'react-icons/md'\r\nimport logo from '../logo.svg'\r\nimport TicketList from './TicketList'\r\n\r\n class BoxModel extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            count:0,\r\n            NumbInput:[],\r\n            result:''\r\n        }\r\n        this.randomgen=this.randomgen.bind(this);\r\n    }\r\n    handlebutton(e){\r\n        const value=e;\r\n        console.log(value);\r\n       const reqnum=''\r\n        switch(value){\r\n            case 'add' :{\r\n                this.setState({result:''})\r\n            }\r\n            case 'backspace':{\r\n               const rew= reqnum.toString.length-1\r\n               reqnum=rew;\r\n               break\r\n            }\r\n            case 'clear':{\r\n                this.setState({result:''})\r\n                break\r\n            }\r\n            default :{\r\n          \r\n               const req= reqnum +value.toString()\r\n                console.log(req)            }}\r\n        \r\n    }\r\n        randomgen =() =>{\r\n            console.log('click')\r\n            const rand=Math.floor(100000 + Math.random() * 999999);\r\n            this.setState({\r\n                count:this.state.count+1,\r\n                result:rand\r\n            })\r\n            \r\n            console.log(this.state.count)\r\n        }\r\n     render(){\r\n         const handlebutton=this.handlebutton;\r\n        \r\n        return(\r\n            <div className='main-box'>\r\n            \r\n            <div className='box-model'>\r\n            <h4 className='tc2'>Enter 6 digits only</h4>\r\n            <h3 id='resno'>123456</h3>\r\n            <button value='1' onClick={e => handlebutton(e.target.value)}>1</button>\r\n            <button value='2' onClick={e => handlebutton(e.target.value)}>2</button>\r\n            <button value='3' onClick={e => handlebutton(e.target.value)}>3</button>\r\n            <button value='4' onClick={e => handlebutton(e.target.value)}>4</button>\r\n            <button value='5' onClick={e => handlebutton(e.target.value)}>5</button>\r\n            <button value='6' onClick={e => handlebutton(e.target.value)}>6</button>\r\n            <button value='7' onClick={e => handlebutton(e.target.value)}>7</button>\r\n            <button value='8' onClick={e => handlebutton(e.target.value)}>8</button>\r\n            <button value='9' onClick={e => handlebutton(e.target.value)}>9</button>\r\n            <button value='backspace' onClick={e => handlebutton(e.target.value)} ><MdBackspace style={{fontSize:'15px'}} /></button>\r\n            <button value='0' onClick={e => handlebutton(e.target.value)}>0</button>\r\n            <button value='clear' onClick={e => handlebutton(e.target.value)}><MdDeleteForever style={{fontSize:'18px'}}/></button>\r\n            <button  value='add' onClick={e => handlebutton(e.target.value)} id='addbtn'><MdAddBox style={{fontSize:'21px',paddingTop:'6px'}}/>Add Ticket</button>\r\n             </div>\r\n             <TicketList value={this.state.result} />\r\n             <div className='randomticketimg'>\r\n             <button onClick={this.randomgen}> <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n             <p className='tc2'>Click to generate random number ticket </p></button>\r\n            \r\n             </div>\r\n             </div>\r\n        )\r\n     }\r\n   \r\n}\r\n\r\n\r\nexport default BoxModel;","import React from 'react';\n\nimport './App.css';\nimport BoxModel from './components/BoxModel'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className='App-header'>Nvest Ticket Generator</h1>\n      <BoxModel/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}